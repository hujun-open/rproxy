// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RProxyAPIClient is the client API for RProxyAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RProxyAPIClient interface {
	Signon(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Signoff(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	CreateWorkerCross(ctx context.Context, in *Empty, opts ...grpc.CallOption) (RProxyAPI_CreateWorkerCrossClient, error)
	ReportWorkerCross(ctx context.Context, opts ...grpc.CallOption) (RProxyAPI_ReportWorkerCrossClient, error)
}

type rProxyAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewRProxyAPIClient(cc grpc.ClientConnInterface) RProxyAPIClient {
	return &rProxyAPIClient{cc}
}

func (c *rProxyAPIClient) Signon(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.RProxyAPI/Signon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rProxyAPIClient) Signoff(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.RProxyAPI/Signoff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rProxyAPIClient) CreateWorkerCross(ctx context.Context, in *Empty, opts ...grpc.CallOption) (RProxyAPI_CreateWorkerCrossClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RProxyAPI_serviceDesc.Streams[0], "/api.RProxyAPI/CreateWorkerCross", opts...)
	if err != nil {
		return nil, err
	}
	x := &rProxyAPICreateWorkerCrossClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RProxyAPI_CreateWorkerCrossClient interface {
	Recv() (*CreateWorkerCrossReq, error)
	grpc.ClientStream
}

type rProxyAPICreateWorkerCrossClient struct {
	grpc.ClientStream
}

func (x *rProxyAPICreateWorkerCrossClient) Recv() (*CreateWorkerCrossReq, error) {
	m := new(CreateWorkerCrossReq)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rProxyAPIClient) ReportWorkerCross(ctx context.Context, opts ...grpc.CallOption) (RProxyAPI_ReportWorkerCrossClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RProxyAPI_serviceDesc.Streams[1], "/api.RProxyAPI/ReportWorkerCross", opts...)
	if err != nil {
		return nil, err
	}
	x := &rProxyAPIReportWorkerCrossClient{stream}
	return x, nil
}

type RProxyAPI_ReportWorkerCrossClient interface {
	Send(*ReportWorkerCrossReq) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type rProxyAPIReportWorkerCrossClient struct {
	grpc.ClientStream
}

func (x *rProxyAPIReportWorkerCrossClient) Send(m *ReportWorkerCrossReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rProxyAPIReportWorkerCrossClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RProxyAPIServer is the server API for RProxyAPI service.
// All implementations must embed UnimplementedRProxyAPIServer
// for forward compatibility
type RProxyAPIServer interface {
	Signon(context.Context, *Empty) (*Empty, error)
	Signoff(context.Context, *Empty) (*Empty, error)
	CreateWorkerCross(*Empty, RProxyAPI_CreateWorkerCrossServer) error
	ReportWorkerCross(RProxyAPI_ReportWorkerCrossServer) error
	mustEmbedUnimplementedRProxyAPIServer()
}

// UnimplementedRProxyAPIServer must be embedded to have forward compatible implementations.
type UnimplementedRProxyAPIServer struct {
}

func (UnimplementedRProxyAPIServer) Signon(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signon not implemented")
}
func (UnimplementedRProxyAPIServer) Signoff(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signoff not implemented")
}
func (UnimplementedRProxyAPIServer) CreateWorkerCross(*Empty, RProxyAPI_CreateWorkerCrossServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateWorkerCross not implemented")
}
func (UnimplementedRProxyAPIServer) ReportWorkerCross(RProxyAPI_ReportWorkerCrossServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportWorkerCross not implemented")
}
func (UnimplementedRProxyAPIServer) mustEmbedUnimplementedRProxyAPIServer() {}

// UnsafeRProxyAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RProxyAPIServer will
// result in compilation errors.
type UnsafeRProxyAPIServer interface {
	mustEmbedUnimplementedRProxyAPIServer()
}

func RegisterRProxyAPIServer(s grpc.ServiceRegistrar, srv RProxyAPIServer) {
	s.RegisterService(&_RProxyAPI_serviceDesc, srv)
}

func _RProxyAPI_Signon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RProxyAPIServer).Signon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RProxyAPI/Signon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RProxyAPIServer).Signon(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RProxyAPI_Signoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RProxyAPIServer).Signoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RProxyAPI/Signoff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RProxyAPIServer).Signoff(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RProxyAPI_CreateWorkerCross_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RProxyAPIServer).CreateWorkerCross(m, &rProxyAPICreateWorkerCrossServer{stream})
}

type RProxyAPI_CreateWorkerCrossServer interface {
	Send(*CreateWorkerCrossReq) error
	grpc.ServerStream
}

type rProxyAPICreateWorkerCrossServer struct {
	grpc.ServerStream
}

func (x *rProxyAPICreateWorkerCrossServer) Send(m *CreateWorkerCrossReq) error {
	return x.ServerStream.SendMsg(m)
}

func _RProxyAPI_ReportWorkerCross_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RProxyAPIServer).ReportWorkerCross(&rProxyAPIReportWorkerCrossServer{stream})
}

type RProxyAPI_ReportWorkerCrossServer interface {
	SendAndClose(*Empty) error
	Recv() (*ReportWorkerCrossReq, error)
	grpc.ServerStream
}

type rProxyAPIReportWorkerCrossServer struct {
	grpc.ServerStream
}

func (x *rProxyAPIReportWorkerCrossServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rProxyAPIReportWorkerCrossServer) Recv() (*ReportWorkerCrossReq, error) {
	m := new(ReportWorkerCrossReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RProxyAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.RProxyAPI",
	HandlerType: (*RProxyAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Signon",
			Handler:    _RProxyAPI_Signon_Handler,
		},
		{
			MethodName: "Signoff",
			Handler:    _RProxyAPI_Signoff_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateWorkerCross",
			Handler:       _RProxyAPI_CreateWorkerCross_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReportWorkerCross",
			Handler:       _RProxyAPI_ReportWorkerCross_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
